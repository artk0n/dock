
DockTop — Emergency Hotfix
==========================

Why it wasn't working
---------------------
Your repository has **corrupted/placeholder content** in a few files:
- `themes.json` contains a literal `...` which makes it **invalid JSON**.
- `App.xaml.cs` and `MainWindow.xaml.cs` also include placeholder `...` which would crash if rebuilt.
- If the app tries to read `themes.json` on startup, JSON parsing throws and the app silently exits with no window.

What this hotfix contains
-------------------------
1) A **sanitized themes.json** with 6 valid themes.
2) A drop‑in `ThemeStore.cs` that *fails safe*:
   - If `themes.json` is missing or invalid, it falls back to in‑code defaults instead of crashing.

How to apply (fastest)
----------------------
1. Close any running DockTop processes (Task Manager → end `DockTop.exe`).
2. Replace files:
   - Copy `themes.json` from this hotfix into the same folder as `DockTop.exe`
     (e.g. `dock/bin/Release/net8.0-windows/win-x64/` or `dock/bin/Debug/net8.0-windows/`).
   - If you intend to **rebuild**, also drop `ThemeStore.cs` into the project root (next to `DockTop.csproj`),
     replacing the empty stub currently there.
3. Launch from a console so you can see errors if any:
   - Shift‑Right‑Click inside the folder → “Open PowerShell window here”
   - Run: `.\DockTop.exe`

Optional: make startup bulletproof
----------------------------------
Add a global handler to surface any fatal startup errors so the app never just "vanishes":

```csharp
// In App.xaml.cs, inside OnStartup BEFORE showing MainWindow:
this.DispatcherUnhandledException += (s, a) =>
{
    System.Windows.MessageBox.Show(a.Exception.ToString(), "DockTop crash", MessageBoxButton.OK, MessageBoxImage.Error);
    a.Handled = true; // prevents silent process exit
};
AppDomain.CurrentDomain.UnhandledException += (s, a) =>
{
    System.Windows.MessageBox.Show(a.Exception?.ToString() ?? "Unknown", "DockTop crash (domain)", MessageBoxButton.OK, MessageBoxImage.Error);
};
```

Also avoid `MessageBox.Show("DockTop starting (debug)…")` in production — it can block startup under certain conditions.

Self‑contained publish (optional)
--------------------------------
If double‑clicking from Explorer still fails due to missing runtime bits when moved, publish a self‑contained build:

```
dotnet publish DockTop.csproj -c Release -r win-x64 -p:SelfContained=true -p:PublishSingleFile=true -p:PublishTrimmed=true
```

This produces a single exe under `bin/Release/net8.0-windows/win-x64/publish/` that you can move anywhere.

—
Generated by your debugging buddy.
