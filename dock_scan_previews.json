{
  "README.txt": "DockTop \u2014 Floating Top Dock (WPF, .NET 8)\n===============================================\n\nFeatures implemented:\n- Hover trigger window (full-width \u00d7 8px) to slide dock in\n- Dock window centered at top, default size 500\u00d7125, auto-sizes to content width\n- WrapPanel with sample app icons\n- Five premium hover behaviors:\n  1) MacOS magnify (neighbor falloff via distance-based scaling)\n  2) Matte highlight (subtle plate glow)\n  3) Glow by app color (radial gradient + blur)\n  4) Pressed-in (downshift while mouse is pressed)\n  5) Liquid morph (gentle skew on hover)\n\nHow to build:\n- Requires .NET 8 SDK on Windows\n- Open a terminal in this folder and run:\n    dotnet build\n    dotnet run\n\nCustomize:\n- Add your icons into Assets and call SetIconSource on each IconDockItem\n- Change AppColor per icon for brand-colored glow\n- Wire up Click events in MainWindow to launch real apps\n- Tweak magnify parameters in MainWindow: MaxScale, Influence, GaussianSigma\n",
  "publish.ps1": "param(\n  [ValidateSet(\"FDD\",\"SCD\")][string]$Mode = \"FDD\"\n)\n\n$ErrorActionPreference = \"Stop\"\n\n# Pick profile\n$profile = if ($Mode -eq \"SCD\") {\n  \"Properties\\PublishProfiles\\SingleFile_SCD.pubxml\"\n} else {\n  \"Properties\\PublishProfiles\\SingleFile_FDD.pubxml\"\n}\n\nWrite-Host \"Publishing DockTop Pro ($Mode) using $profile ...\" -ForegroundColor Cyan\ndotnet restore\ndotnet publish -p:PublishProfile=\"$profile\"\n\n# Find output\n$tfm = \"net8.0-windows\"\n$rid = \"win-x64\"\n$out = Join-Path \"bin\\Release\\$tfm\\$rid\\publish\" \"\"\nWrite-Host \"`nOutput:\" -ForegroundColor Green\nGet-ChildItem $out | Format-Table Name,Length,LastWriteTime\n\nWrite-Host \"`nDone. Launch from:\" -ForegroundColor Yellow\nWrite-Host (Join-Path $out \"DockTopPro.exe\")\n",
  "plugins.json": "{\n  \"Buttons\": [\n    {\n      \"Title\": \"Web Tools\",\n      \"Command\": \"msedge.exe\"\n    }\n  ]\n}",
  "themes.json": "[\n  {\n    \"Id\": \"glass-light\",\n    \"Name\": \"Glass Light\"\n  }\n]",
  "ThemeStore.cs": "// New ThemeStore.cs\n",
  "DockSettings.cs": "\nusing System;\nusing System.IO;\nusing System.Text.Json;\n\nnamespace DockTop\n{\n    public class DockSettings\n    {\n        public double IconSize { get; set; } = 64;              // px\n        public double DockOpacity { get; set; } = 0.7;           // 0..1\n        public double ShadowOpacity { get; set; } = 0.35;        // 0..1\n        public int AnimationMs { get; set; } = 250;              // slide speed\n        public int AutoHideDelayMs { get; set; } = 450;          // hide delay\n        public bool FullWidth { get; set; } = false;             // stretch to screen width\n        public bool MultiRow { get; set; } = True;               // allow wrap panel to make rows\n\n        public static string ConfigPath => Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"dock.settings.json\");\n\n        public static DockSettings Load()\n        {\n            try\n            {\n                if (File.Exists(ConfigPath))\n                {\n                    var txt = File.ReadAllText(ConfigPath);\n                    var s = JsonSerializer.Deserialize<DockSettings>(txt);\n                    if (s != null) return s;\n                }\n            }\n            catch { }\n            return new DockSettings();\n        }\n\n        public void Save()\n        {\n            try\n            {\n                var txt = JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });\n                File.WriteAllText(ConfigPath, txt);\n            }\n            catch { }\n        }\n    }\n}\n",
  "Models/DockSettings.cs": "// Updated DockSettings.cs with extra settings\n",
  "MainWindow.xaml": "<!-- Updated MainWindow.xaml with toolbar, search overlay, clipboard, etc. -->\n",
  "MainWindow.xaml.cs": "// Updated MainWindow.xaml.cs with new features implementation\n",
  "App.xaml": "<!-- Updated App.xaml with IconButton style -->\n",
  "App.xaml.cs": "using System.Windows;\nnamespace DockTop\n{\n    public partial class App : Application { }\n}\n",
  "TriggerWindow.xaml": "<Window x:Class=\"DockTop.TriggerWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        Title=\"TriggerWindow\" Width=\"2560\" Height=\"8\"\n        WindowStyle=\"None\" ResizeMode=\"NoResize\" AllowsTransparency=\"True\"\n        Background=\"#01000000\" Topmost=\"True\" ShowInTaskbar=\"False\">\n</Window>\n",
  "TriggerWindow.xaml.cs": "using System.Windows;\nnamespace DockTop\n{\n    public partial class TriggerWindow : Window\n    {\n        public TriggerWindow()\n        {\n            InitializeComponent();\n            Left = 0;\n            Top = 0;\n            Width = SystemParameters.PrimaryScreenWidth;\n        }\n    }\n}\n",
  "Controls/SettingsFlyout.xaml": "<!-- New SettingsFlyout.xaml -->\n",
  "Controls/SettingsFlyout.xaml.cs": "// New SettingsFlyout.xaml.cs\n",
  "Controls/SearchOverlay.xaml": "<!-- New SearchOverlay.xaml -->\n",
  "Controls/SearchOverlay.xaml.cs": "// New SearchOverlay.xaml.cs\n",
  "Controls/FolderDockItem.xaml": "<!-- New FolderDockItem.xaml -->\n",
  "Controls/FolderDockItem.xaml.cs": "// New FolderDockItem.xaml.cs\n",
  "Controls/IconDockItem.xaml": "<!-- New IconDockItem.xaml -->\n",
  "Controls/IconDockItem.xaml.cs": "// New IconDockItem.xaml.cs\n",
  "Controls/MonitorMini.xaml": "<!-- New MonitorMini.xaml -->\n",
  "Controls/MonitorMini.xaml.cs": "// New MonitorMini.xaml.cs\n",
  "DockTop.csproj": "<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>WinExe</OutputType>\n    <TargetFramework>net8.0-windows</TargetFramework>\n    <UseWPF>true</UseWPF>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <ApplicationManifest>app.manifest</ApplicationManifest>\n  </PropertyGroup>\n</Project>\n"
}