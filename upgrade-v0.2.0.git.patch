diff --git a/MainWindow.xaml b/MainWindow.xaml
index 88b3725..8464a30 100644
--- a/MainWindow.xaml
+++ b/MainWindow.xaml
@@ -34,13 +34,13 @@

         </StackPanel>
 
         <!-- Center: items -->
-        <ItemsControl x:Name="ItemsHost" ItemsSource="{Binding DisplayItems}" Margin="8,2">
-          <ItemsControl.ItemsPanel>
+        <ListBox x:Name="TileList" AllowDrop="True" SelectionMode="Single" x:Name="ItemsHost" ItemsSource="{Binding DisplayItems}" Margin="8,2">
+          <ListBox x:Name="TileList" AllowDrop="True" SelectionMode="Single".ItemsPanel>
             <ItemsPanelTemplate>
               <StackPanel Orientation="Horizontal"/>
             </ItemsPanelTemplate>
           </ItemsControl.ItemsPanel>
-          <ItemsControl.ItemTemplate>
+          <ListBox x:Name="TileList" AllowDrop="True" SelectionMode="Single".ItemTemplate>
             <DataTemplate>
               <Button Click="DockItem_Click" Padding="8" Margin="4,0,4,0" MinWidth="64"
                       HorizontalAlignment="Center" VerticalAlignment="Center">
@@ -51,7 +51,7 @@

               </Button>
             </DataTemplate>
           </ItemsControl.ItemTemplate>
-        </ItemsControl>
+        </ListBox>
 
         <!-- Right -->
         <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" VerticalAlignment="Center">
@@ -61,7 +61,11 @@

           <Button x:Name="BtnClose" Content="×" Width="28" Height="28"
                   Click="BtnClose_Click" ToolTip="Close"/>
         </StackPanel>
-      </DockPanel>
+      
+  <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,6,0,0" x:Name="PART_PageDots">
+      <!-- dots added in code-behind -->
+  </StackPanel>
+</DockPanel>
     </Border>
   </Grid>
 </Window>
diff --git a/MainWindow.xaml.cs b/MainWindow.xaml.cs
index 9dc26c1..edd1078 100644
--- a/MainWindow.xaml.cs
+++ b/MainWindow.xaml.cs
@@ -59,6 +59,12 @@

             DataContext = this;
             InitializeComponent();
 
+            // Hook drag events for reordering
+            TileList.PreviewMouseLeftButtonDown += OnTileMouseDown;
+            TileList.MouseMove += OnTileMouseMove;
+            TileList.Drop += OnTileDrop;
+            TileList.DragOver += (s,e)=> e.Effects = System.Windows.DragDropEffects.Move;
+
 
             if (Settings.Current.AutoHide)
             {
@@ -72,6 +78,7 @@

             }
 
             BuildItems();
+            RebuildPageDots();
 Topmost = Settings.Current.Topmost;
             DwmBackdrop.Apply(this, Settings.Current.Backdrop);
         }
@@ -119,35 +126,33 @@

         private void HideDock()
         {
             _hidden = true;
+            if (Settings.Current.ClickThroughWhenHidden) DockTop.Utils.WindowStyles.SetClickThrough(this, true);
             var edge = Settings.Current.DockEdge;
             var sw = SystemParameters.PrimaryScreenWidth;
             var sh = SystemParameters.PrimaryScreenHeight;
-            var peek = Math.Max(0, Settings.Current.AutoHidePeekPx);
-            switch (edge)
-            {
-                case "Top": Top = -(Height - peek); Left = 0; Width = sw; break;
-                case "Bottom": Top = sh - peek; Left = 0; Width = sw; break;
-                case "Left": Left = -(Width - peek); Top = 0; Height = sh; break;
-                case "Right": Left = sw - peek; Top = 0; Height = sh; break;
-                default: Top = -(Height - peek); Left = 0; break;
-            }
+            var peek = System.Math.Max(0, Settings.Current.AutoHidePeekPx);
+            if (edge == "Top") { Left = 0; Width = sw; AnimateTo(Window.TopProperty, -(Height - peek), Settings.Current.HideAnimationMs); }
+            else if (edge == "Bottom") { Left = 0; Width = sw; AnimateTo(Window.TopProperty, sh - peek, Settings.Current.HideAnimationMs); }
+            else if (edge == "Left") { Top = 0; Height = sh; AnimateTo(Window.LeftProperty, -(Width - peek), Settings.Current.HideAnimationMs); }
+            else { Top = 0; Height = sh; AnimateTo(Window.LeftProperty, sw - peek, Settings.Current.HideAnimationMs); }
+            AnimateTo(Window.OpacityProperty, 0.001, Settings.Current.HideAnimationMs);
+        }
         }
         }
 
         private void ShowDock()
         {
             _hidden = false;
+            DockTop.Utils.WindowStyles.SetClickThrough(this, false);
             var edge = Settings.Current.DockEdge;
             var sw = SystemParameters.PrimaryScreenWidth;
             var sh = SystemParameters.PrimaryScreenHeight;
-            switch (edge)
-            {
-                case "Top": Top = 0; Left = 0; Width = sw; break;
-                case "Bottom": Top = sh - Height; Left = 0; Width = sw; break;
-                case "Left": Left = 0; Top = 0; Height = sh; break;
-                case "Right": Left = sw - Width; Top = 0; Height = sh; break;
-                default: Top = 0; Left = 0; break;
-            }
+            if (edge == "Top") { Left = 0; Width = sw; AnimateTo(Window.TopProperty, 0, Settings.Current.RevealAnimationMs); }
+            else if (edge == "Bottom") { Left = 0; Width = sw; AnimateTo(Window.TopProperty, sh - Height, Settings.Current.RevealAnimationMs); }
+            else if (edge == "Left") { Top = 0; Height = sh; AnimateTo(Window.LeftProperty, 0, Settings.Current.RevealAnimationMs); }
+            else { Top = 0; Height = sh; AnimateTo(Window.LeftProperty, sw - Width, Settings.Current.RevealAnimationMs); }
+            AnimateTo(Window.OpacityProperty, 0.98, Settings.Current.RevealAnimationMs);
+        }
         }
         }
 
@@ -182,6 +187,7 @@

                 Items.Items.Add(item);
                 Items.Save();
                 BuildItems();
+            RebuildPageDots();
             }
         }
 
@@ -215,14 +221,20 @@

 
         private void ApplyEdgeLayout()
         {
-            // Thickness: for vertical edges, use DockHeight as width to keep consistent 'thickness'
             var sw = SystemParameters.PrimaryScreenWidth;
             var sh = SystemParameters.PrimaryScreenHeight;
             if (Settings.Current.DockEdge == "Left" || Settings.Current.DockEdge == "Right")
             {
-                Width = DockHeight; // thickness
+                Width = System.Math.Max(44, Settings.Current.ThicknessVertical);
                 Height = sh;
             }
+            else
+            {
+                Width = sw;
+                Height = System.Math.Max(44, Settings.Current.ThicknessHorizontal);
+            }
+            ShowDock();
+        }
             else
             {
                 Width = sw;
@@ -258,3 +270,77 @@

     
     }
 }
+
+private System.Windows.Point _dragStart;
+private bool _isDragging = false;
+
+private void OnTileMouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
+{
+    _dragStart = e.GetPosition(null);
+    _isDragging = false;
+}
+
+private void OnTileMouseMove(object sender, System.Windows.Input.MouseEventArgs e)
+{
+    if (e.LeftButton != System.Windows.Input.MouseButtonState.Pressed) return;
+    var pos = e.GetPosition(null);
+    if (_isDragging == false && (System.Math.Abs(pos.X - _dragStart.X) > 5 || System.Math.Abs(pos.Y - _dragStart.Y) > 5))
+    {
+        _isDragging = true;
+        if (TileList.SelectedItem != null)
+            System.Windows.DragDrop.DoDragDrop(TileList, TileList.SelectedItem, System.Windows.DragDropEffects.Move);
+    }
+}
+
+private void OnTileDrop(object sender, System.Windows.DragEventArgs e)
+{
+    var data = e.Data.GetData(typeof(DockItem)) as DockItem;
+    var target = (e.OriginalSource as FrameworkElement)?.DataContext as DockItem;
+    if (data == null || target == null || data == target) return;
+
+    var list = new System.Collections.Generic.List<DockItem>(Items.All);
+    int oldIndex = list.IndexOf(data);
+    int newIndex = list.IndexOf(target);
+    if (oldIndex >= 0 && newIndex >= 0)
+    {
+        list.RemoveAt(oldIndex);
+        list.Insert(newIndex, data);
+        Items.ReplaceAll(list);
+        Items.Save();
+        BuildItems();
+            RebuildPageDots();
+    }
+}
+
+
+private void AnimateTo(DependencyProperty prop, double to, int ms)
+{
+    var anim = new System.Windows.Media.Animation.DoubleAnimation
+    {
+        To = to,
+        Duration = new System.Windows.Duration(System.TimeSpan.FromMilliseconds(ms)),
+        EasingFunction = new System.Windows.Media.Animation.CubicEase { EasingMode = System.Windows.Media.Animation.EasingMode.EaseOut }
+    };
+    this.BeginAnimation(prop, anim);
+}
+
+
+private int _pageIndex = 0;
+private void RebuildPageDots()
+{
+    try
+    {
+        if (Items == null || PART_PageDots == null) return;
+        int per = System.Math.Max(1, Settings.Current.TilesPerPage);
+        int total = Items.All.Count;
+        int pages = System.Math.Max(1, (int)System.Math.Ceiling(total / (double)per));
+        PART_PageDots.Children.Clear();
+        for (int i=0;i<pages;i++)
+        {
+            var b = new System.Windows.Controls.Button { Content = (i==_pageIndex?"●":"○"), Margin = new System.Windows.Thickness(3,0,3,0), Padding = new System.Windows.Thickness(0) };
+            int idx = i;
+            b.Click += (_, __) => { _pageIndex = idx; BuildItems(); RebuildPageDots(); };
+            PART_PageDots.Children.Add(b);
+        }
+    } catch {}
+}
diff --git a/Models/UserSettings.cs b/Models/UserSettings.cs
index 70b74a0..0ebadd8 100644
--- a/Models/UserSettings.cs
+++ b/Models/UserSettings.cs
@@ -10,6 +10,16 @@

         public string AccentHex { get; set; } = "#B81F1120"; // hsla(297,30%,9.6%,0.72)
         public bool Topmost { get; set; } = true;
         public bool AutoHide { get; set; } = true;
+        public bool AutoStartWithWindows { get; set; } = false;
+        public MonitorProfile Profile { get; set; } = new MonitorProfile();
+        public bool ClickThroughWhenHidden { get; set; } = true;
+        public string HotkeySearch { get; set; } = "Ctrl+K";
+        public string HotkeyToggle { get; set; } = "Ctrl+Alt+D";
+        public int TilesPerPage { get; set; } = 12; // rough default; auto-computed for width
+        public int HideAnimationMs { get; set; } = 160;
+        public int RevealAnimationMs { get; set; } = 140;
+        public int ThicknessVertical { get; set; } = 76;   // px (Left/Right)
+        public int ThicknessHorizontal { get; set; } = 76; // px (Top/Bottom)
         public string DockEdge { get; set; } = "Top"; // Top|Bottom|Left|Right
         public int AutoHidePeekPx { get; set; } = 1;
         public int AutoHideShowDelayMs { get; set; } = 100;
@@ -56,3 +66,12 @@

         }
     }
 }
+
+
+public class MonitorProfile
+{
+    public string ScreenId { get; set; } = "Primary";
+    public string DockEdge { get; set; } = "Top";
+    public int ThicknessHorizontal { get; set; } = 76;
+    public int ThicknessVertical { get; set; } = 76;
+}
diff --git a/Services/AutoStartService.cs b/Services/AutoStartService.cs
new file mode 100644
index 0000000..a151dcf
--- /dev/null
+++ b/Services/AutoStartService.cs
@@ -0,0 +1,31 @@

+
+using Microsoft.Win32;
+
+namespace DockTop.Services
+{
+    public static class AutoStartService
+    {
+        private const string RUN_KEY = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
+        private const string APP_NAME = "DockTop";
+        public static void SetAutoStart(bool enabled, string exePath)
+        {
+            try
+            {
+                using var key = Registry.CurrentUser.OpenSubKey(RUN_KEY, true) ?? Registry.CurrentUser.CreateSubKey(RUN_KEY, true);
+                if (enabled)
+                    key.SetValue(APP_NAME, $"\"{exePath}\"");
+                else if (key.GetValue(APP_NAME) != null)
+                    key.DeleteValue(APP_NAME);
+            }
+            catch {}
+        }
+        public static bool IsEnabled()
+        {
+            try
+            {
+                using var key = Registry.CurrentUser.OpenSubKey(RUN_KEY, false);
+                return key?.GetValue(APP_NAME) != null;
+            } catch { return false; }
+        }
+    }
+}
diff --git a/Utils/IconExtractor.cs b/Utils/IconExtractor.cs
new file mode 100644
index 0000000..74720ba
--- /dev/null
+++ b/Utils/IconExtractor.cs
@@ -0,0 +1,46 @@

+
+using System;
+using System.Drawing;
+using System.IO;
+using System.Runtime.InteropServices;
+using System.Windows.Media.Imaging;
+
+namespace DockTop.Utils
+{
+    public static class IconExtractor
+    {
+        [DllImport("Shell32.dll", CharSet = CharSet.Unicode)]
+        private static extern int ExtractIconEx(string lpszFile, int nIconIndex,
+            out IntPtr phiconLarge, out IntPtr phiconSmall, uint nIcons);
+
+        public static BitmapSource? FromExecutable(string path, bool large = true)
+        {
+            try
+            {
+                IntPtr largeIco; IntPtr smallIco;
+                var count = ExtractIconEx(path, 0, out largeIco, out smallIco, 1);
+                if (count > 0)
+                {
+                    using var ico = Icon.FromHandle(large ? largeIco : smallIco);
+                    using var bmp = ico.ToBitmap();
+                    return ToBitmapSource(bmp);
+                }
+            } catch {}
+            return null;
+        }
+
+        private static BitmapSource ToBitmapSource(Bitmap bitmap)
+        {
+            using var ms = new MemoryStream();
+            bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
+            ms.Seek(0, SeekOrigin.Begin);
+            var img = new BitmapImage();
+            img.BeginInit();
+            img.CacheOption = BitmapCacheOption.OnLoad;
+            img.StreamSource = ms;
+            img.EndInit();
+            img.Freeze();
+            return img;
+        }
+    }
+}
diff --git a/Utils/WindowStyles.cs b/Utils/WindowStyles.cs
new file mode 100644
index 0000000..403dc63
--- /dev/null
+++ b/Utils/WindowStyles.cs
@@ -0,0 +1,29 @@

+
+using System;
+using System.Runtime.InteropServices;
+using System.Windows;
+using System.Windows.Interop;
+
+namespace DockTop.Utils
+{
+    public static class WindowStyles
+    {
+        const int GWL_EXSTYLE = -20;
+        const int WS_EX_TRANSPARENT = 0x00000020;
+        const int WS_EX_LAYERED = 0x00080000;
+
+        [DllImport("user32.dll")]
+        static extern int GetWindowLong(IntPtr hWnd, int nIndex);
+        [DllImport("user32.dll")]
+        static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
+
+        public static void SetClickThrough(Window w, bool enabled)
+        {
+            var hwnd = new WindowInteropHelper(w).Handle;
+            int ex = GetWindowLong(hwnd, GWL_EXSTYLE);
+            if (enabled) ex |= (WS_EX_TRANSPARENT | WS_EX_LAYERED);
+            else ex &= ~(WS_EX_TRANSPARENT);
+            SetWindowLong(hwnd, GWL_EXSTYLE, ex);
+        }
+    }
+}
diff --git a/Views/SettingsWindow.xaml b/Views/SettingsWindow.xaml
index cca724d..930217d 100644
--- a/Views/SettingsWindow.xaml
+++ b/Views/SettingsWindow.xaml
@@ -40,6 +40,35 @@

     <ComboBoxItem Content="Right"/>
   </ComboBox>
 </StackPanel>
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Thickness (H):" Width="120"/>
+  <Slider x:Name="SldThH" Minimum="44" Maximum="160" Width="200"/>
+  <TextBlock Text="{Binding ElementName=SldThH, Path=Value, StringFormat=F0}" Margin="6,0,0,0"/>
+</StackPanel>
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Thickness (V):" Width="120"/>
+  <Slider x:Name="SldThV" Minimum="44" Maximum="220" Width="200"/>
+  <TextBlock Text="{Binding ElementName=SldThV, Path=Value, StringFormat=F0}" Margin="6,0,0,0"/>
+</StackPanel>
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Reveal Anim (ms):" Width="120"/>
+  <TextBox x:Name="TxtAnimIn" Width="80"/>
+</StackPanel>
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Hide Anim (ms):" Width="120"/>
+  <TextBox x:Name="TxtAnimOut" Width="80"/>
+</StackPanel>
+<CheckBox x:Name="ChkClickThrough" Content="Click-through when hidden" />
+<CheckBox x:Name="ChkAutoStart" Content="Auto-start with Windows" />
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Dock Edge:" Width="120"/>
+  <ComboBox x:Name="CmbEdge" Width="200">
+    <ComboBoxItem Content="Top"/>
+    <ComboBoxItem Content="Bottom"/>
+    <ComboBoxItem Content="Left"/>
+    <ComboBoxItem Content="Right"/>
+  </ComboBox>
+</StackPanel>
       <CheckBox x:Name="ChkTop" Content="Always on Top" IsChecked="True"/>
       <CheckBox x:Name="ChkAuto" Content="Auto-hide" IsChecked="True" Margin="0,4,0,4"/>
       <StackPanel Orientation="Horizontal" Margin="0,0,0,6">
@@ -48,6 +77,15 @@

       </StackPanel>
 
       <TextBlock Text="Plugins" FontWeight="Bold" Margin="0,12,0,8"/>
+<TextBlock Text="Hotkeys" FontWeight="Bold" Margin="0,12,0,8"/>
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Toggle Dock:" Width="120"/>
+  <TextBox x:Name="TxtHotToggle" Width="200"/>
+</StackPanel>
+<StackPanel Orientation="Horizontal" Margin="0,0,0,6">
+  <TextBlock Text="Search:" Width="120"/>
+  <TextBox x:Name="TxtHotSearch" Width="200"/>
+</StackPanel>
       <CheckBox x:Name="ChkClock" Content="Clock (12h)"/>
       <CheckBox x:Name="ChkNow" Content="Now Playing" IsChecked="True"/>
       <CheckBox x:Name="ChkPing" Content="Network Ping" IsChecked="True"/>
diff --git a/Views/SettingsWindow.xaml.cs b/Views/SettingsWindow.xaml.cs
index 3eedcb4..2b1f88c 100644
--- a/Views/SettingsWindow.xaml.cs
+++ b/Views/SettingsWindow.xaml.cs
@@ -30,6 +30,15 @@

             _svc.Current.Backdrop = (CmbBackdrop.SelectedIndex==1) ? "Acrylic" : "Mica";
             _svc.Current.CornerRadius = (int)SldRadius.Value;
             _svc.Current.GlowOpacity = SldGlow.Value;
+            _svc.Current.DockEdge = (CmbEdge.SelectedIndex==0?"Top":(CmbEdge.SelectedIndex==1?"Bottom":(CmbEdge.SelectedIndex==2?"Left":"Right")));
+            _svc.Current.ThicknessHorizontal = (int)SldThH.Value;
+            _svc.Current.ThicknessVertical = (int)SldThV.Value;
+            if (int.TryParse(TxtAnimIn.Text, out var ain)) _svc.Current.RevealAnimationMs = ain;
+            if (int.TryParse(TxtAnimOut.Text, out var aout)) _svc.Current.HideAnimationMs = aout;
+            _svc.Current.ClickThroughWhenHidden = ChkClickThrough.IsChecked==true;
+            _svc.Current.AutoStartWithWindows = ChkAutoStart.IsChecked==true;
+            _svc.Current.HotkeyToggle = TxtHotToggle.Text;
+            _svc.Current.HotkeySearch = TxtHotSearch.Text;
             _svc.Current.IconSize = CmbIcon.SelectedIndex==0 ? 24 : (CmbIcon.SelectedIndex==2 ? 50 : 32);
             _svc.Current.Topmost = ChkTop.IsChecked==true;
             _svc.Current.AutoHide = ChkAuto.IsChecked==true;
